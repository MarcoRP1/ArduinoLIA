// This project consists of establishing a variable set point, and having the LED adjust its intensity until
// the PV value is the same as the set point. This will happen by reducing the error by multiplying it by 
// a proportional gain, then to multiply the remaining error by the integral action, which will solve the
// error margin more rapidly. The addition of both factors then becomes the control output, and then the 
// process value will oscillate until it reaches the set point. The stabilization will happen much quicker 
// than on proportional control.


#include <LiquidCrystal.h> // include LCD library

const int rs = 7, en = 8, d4 = 10, d5 = 11, d6 = 12, d7 = 13;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

int red = 2;
int orng = 3;
int yllo = 4; // labeling the pushbuttons
int grn = 5;


int PV = 0; // variable
int CO = 0; // variable
int SSE = 0; // variable
int IntegralAction = 0; // variable

int SPT = 200; // adjustable value
float PG = 0.1; // adjustable value
float IG = 0.1; // adjustable value

unsigned long previousMillis = 0;
const long interval = 100; // timer between measurements
unsigned long currentMillis;

int redpbval;
int redlastpbval;
int redpresscount;

int orngpbval;
int ornglastpbval; // establishing count values for pushbuttons
int orngpresscount;

int yllopbval;
int yllolastpbval;
int yllopresscount;

void setup() {



lcd.begin(16, 2); // start LCD display

pinMode (6, OUTPUT); // establish LED pin as output

Serial.begin(9600); // begin serial  communication



pinMode (red, INPUT_PULLUP);
redpbval=digitalRead(red);

pinMode (orng, INPUT_PULLUP); // pinModes for pushbuttons
orngpbval=digitalRead(orng);

pinMode (yllo, INPUT_PULLUP);
yllopbval=digitalRead(yllo);

}

void loop() {  


int PV = analogRead (A0); // read the LDR value

currentMillis = millis(); // use timer to calculate CO value

if (currentMillis - previousMillis >= interval){

previousMillis = currentMillis; 

SSE = (SPT-PV); // calculation for steady state error


IntegralAction = (IntegralAction + SSE); 
// new IntegralAction value is sum of SSE

CO = ((PG*SSE)+(IG*IntegralAction))/10;
// calculation to obtain CO

if (CO > 255)
  {
  CO=255;
  } // limiter for the control output value

if (CO < 0)
  {
  CO=0;
  }
}

analogWrite (6, CO); // write the CO value to the LED

redlastpbval = redpbval;
 redpbval = digitalRead (red);
 
 if (redpbval == 1 && redlastpbval == 0){
  redpresscount = redpresscount + 1;
  
 } // switch screen & counter (red PB)

 if (redpresscount >= 3) {
  redpresscount = 0;
 }  



Serial.print ("SPT = ");
Serial.print(SPT);
Serial.print ("/t");
Serial.print ("PV = ");
Serial.print(PV); // serial print the SP, PV, 
Serial.print ("/t"); // CO, SSE and IG values
Serial.print ("CO = "); 
Serial.print(CO);
Serial.print ("/t");
Serial.print ("SSE = ");
Serial.println(SSE);
Serial.print ("/t");
Serial.print ("IG = ");
Serial.println(IG);
Serial.print ("/t");

if (redpresscount == 0) { // when red PB is at 0 presses
  lcd.setCursor(0, 0); 
  lcd.print("SPT = "); 
  lcd.print(SPT);
  lcd.print("   "); // LCD print the following

  lcd.setCursor(0, 1); 
  lcd.print("PV = "); 
  lcd.print(PV);
  lcd.print("   ");
 
 ornglastpbval = orngpbval;
 orngpbval = digitalRead (orng);

 if (orngpbval == 1 && ornglastpbval == 0){
  (SPT = SPT + 50);
 } // orange PB will add 50 to the set point

 yllolastpbval = yllopbval;
 yllopbval = digitalRead (yllo);

 if (yllopbval == 1 && yllolastpbval == 0){
  (SPT = SPT - 50);
 } // yellow PB will subtract 50 from the set point

} // end of red PB = 0

if (redpresscount == 1) { // when red PB is at 1 press
  lcd.setCursor(0, 0); 
  lcd.print("PG = "); 
  lcd.print(PG);
  lcd.print("   "); // LCD print the following

  lcd.setCursor(0, 1); 
  lcd.print("CO = "); 
  lcd.print(CO);
  lcd.print("   ");


  ornglastpbval = orngpbval;
  orngpbval = digitalRead (orng);

 if (orngpbval == 1 && ornglastpbval == 0){
  (PG = PG + 0.1);
 } // orange PB will add 0.1 to pGain

 yllolastpbval = yllopbval;
 yllopbval = digitalRead (yllo);

 if (yllopbval == 1 && yllolastpbval == 0){
  (PG = PG - 0.1);
 } // yellow PB will subtract 0.1 from pGain

 } // end of red PB = 1

 if (redpresscount == 2) { // when red PB is at 2 presses
  lcd.setCursor(0, 0); 
  lcd.print("IG = "); 
  lcd.print(IG);
  lcd.print("   "); // LCD print the following

  lcd.setCursor(0, 1); 
  lcd.print("SSE = "); 
  lcd.print(SSE);
  lcd.print("      ");

  ornglastpbval = orngpbval;
  orngpbval = digitalRead (orng);

 if (orngpbval == 1 && ornglastpbval == 0){
  (IG = IG + 0.1); // orange PB will add 0.1 to IGain
 }

 yllolastpbval = yllopbval;
 yllopbval = digitalRead (yllo);

 if (yllopbval == 1 && yllolastpbval == 0){
  (IG = IG - 0.1); // yellow PB will subtract 0.1 from IGain
 }

 } // end of red PB = 2

} // end of loop
